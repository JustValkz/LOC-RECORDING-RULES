# ASCII Art Header in Cyan
Write-Host @"
| |   |  _  /  __ \ | ___ \  ___/  __ \  _  | ___ \  _  \_   _| \ | |  __ \ | ___ \  _  | |   |_   _/  __ \ \ / /
| |   | | | | /  \/ | |_/ / |__ | /  \/ | | | |_/ / | | | | | |  \| | |  \/ | |_/ / | | | |     | | | /  \/\ V /
| |   | | | | |     |    /|  __|| |   | | | |    /| | | | | | | .  | | __  |  __/| | | | |     | | | |     \ /
| |___\ \_/ / \__/\ | |\ \| |___| \__/\ \_/ / |\ \| |/ / _| |_| |\  | |\_\ \ | |   \ \_/ / |_____| |_| \__/\ | |
\_____/\___/ \____/ \_| \_\____/ \____/\___/\_| \_|___/  \___/\_| \_/\____/ \_|    \___/\_____/\___/ \____/ \_/

Made by @enduremysoul & @justvalkz | discord.gg/locx / discord.gg/locjd
"@ -ForegroundColor Cyan

# --- OS Check ---
Write-Host "--- OS Check ---" -ForegroundColor White
if ($env:OS -ne "Windows_NT") {
    Write-Host "ERROR: This script is intended for Windows only." -ForegroundColor Red
    exit
} else {
    Write-Host "SUCCESS: Running on Windows." -ForegroundColor Green
}

# --- GPU Check (NVIDIA Detection) ---
Write-Host "--- GPU Check (NVIDIA) ---" -ForegroundColor White
try {
    $gpus = Get-WmiObject Win32_VideoController
    $nvidiaGpus = $gpus | Where-Object { $_.Name -like "*NVIDIA*" }

    if ($nvidiaGpus.Count -gt 0) {
        Write-Host "SUCCESS: NVIDIA GPU detected:" -ForegroundColor Green
        $nvidiaGpus | ForEach-Object { Write-Host " - $($_.Name)" -ForegroundColor Green }
    } else {
        Write-Host "INFO: No NVIDIA GPU found." -ForegroundColor Yellow
    }
} catch {
    Write-Host "ERROR: Could not check GPU information." -ForegroundColor Red
}

# --- Windows PowerShell Check ---
Write-Host "--- Windows PowerShell Check ---" -ForegroundColor White
$psPath = $PSVersionTable.PSEdition
if ($psPath -eq "Desktop") {
    Write-Host "SUCCESS: Running on real Windows PowerShell." -ForegroundColor Green
} else {
    Write-Host "INFO: Likely running PowerShell Core or non-standard shell: $psPath" -ForegroundColor Yellow
}

# --- Virtual Machine Check ---
Write-Host "--- Virtualized Machine Check ---" -ForegroundColor White
try {
    $sysProduct = Get-WmiObject Win32_ComputerSystem
    $manufacturer = $sysProduct.Manufacturer
    $model = $sysProduct.Model

    if ($manufacturer -match "VMware|Microsoft Corporation|VirtualBox|Xen|QEMU|KVM" -or $model -match "Virtual|VMware|VirtualBox") {
        Write-Host "WARNING: System appears to be running in a Virtual Machine." -ForegroundColor Yellow
        Write-Host " - Manufacturer: $manufacturer" -ForegroundColor Yellow
        Write-Host " - Model: $model" -ForegroundColor Yellow
    } else {
        Write-Host "SUCCESS: Physical machine detected." -ForegroundColor Green
    }
} catch {
    Write-Host "ERROR: Could not perform virtualization check." -ForegroundColor Red
}

# --- Memory Integrity Check ---
Write-Host "--- Memory Integrity ---" -ForegroundColor White
$memIntegrityPath = 'HKLM:\SYSTEM\CurrentControlSet\Control\DeviceGuard\Scenarios\HypervisorEnforcedCodeIntegrity'
$memIntegrity = Get-ItemProperty -Path $memIntegrityPath -Name "Enabled" -ErrorAction SilentlyContinue

if ($memIntegrity.Enabled -eq 1) {
    Write-Host "SUCCESS: Memory Integrity supported." -ForegroundColor Green
    Write-Host "SUCCESS: Memory Integrity is ON." -ForegroundColor Green
} else {
    Write-Host "FAIL: Memory Integrity unsupported or OFF." -ForegroundColor Red
}

# --- Windows Defender Real-time Protection Check ---
Write-Host "--- Windows Defender ---" -ForegroundColor White
$realTimeDisabled = (Get-MpPreference).DisableRealtimeMonitoring
if ($realTimeDisabled) {
    Write-Host "FAIL: Realtime protection is OFF." -ForegroundColor Red
} else {
    Write-Host "SUCCESS: Realtime protection is ON." -ForegroundColor Green
}

# --- Defender Exclusions Check (Expanded) ---
Write-Host "--- Defender Exclusions ---" -ForegroundColor White
$excl = @()
$pref = Get-MpPreference

if ($pref.ExclusionProcess) {
    Write-Host "Exclusion Processes:" -ForegroundColor Yellow
    $pref.ExclusionProcess | ForEach-Object { Write-Host " - $_" -ForegroundColor Yellow }
    $excl += $pref.ExclusionProcess
}
if ($pref.ExclusionPath) {
    Write-Host "Exclusion Paths:" -ForegroundColor Yellow
    $pref.ExclusionPath | ForEach-Object { Write-Host " - $_" -ForegroundColor Yellow }
    $excl += $pref.ExclusionPath
}
if ($pref.ExclusionExtension) {
    Write-Host "Exclusion Extensions:" -ForegroundColor Yellow
    $pref.ExclusionExtension | ForEach-Object { Write-Host " - $_" -ForegroundColor Yellow }
    $excl += $pref.ExclusionExtension
}

if ($excl.Count -eq 0) {
    Write-Host "SUCCESS: No Defender exclusions set." -ForegroundColor Green
} else {
    Write-Host "WARNING: Defender exclusions detected above." -ForegroundColor Yellow
}

# --- Active Allowed Threats Check ---
Write-Host "--- Allowed Threats ---" -ForegroundColor White
$allowedThreats = Get-MpThreatDetection | Where-Object {
    ($_.ThreatStatus -eq "Allowed" -or $_.ThreatStatus -eq "AllowedByUser") -and
    ($_.Resources -and $_.Resources.Count -gt 0)
}

if (!$allowedThreats -or $allowedThreats.Count -eq 0) {
    Write-Host "SUCCESS: No active allowed threats." -ForegroundColor Green
} else {
    Write-Host "WARNING: Active allowed threats detected!" -ForegroundColor Red
}

# --- Restored Threats Check (Event Logs, past 7 days) ---
Write-Host "--- Restored Threats (past 7 days) ---" -ForegroundColor White
$sevenDaysAgo = (Get-Date).AddDays(-7)

try {
    $events = Get-WinEvent -FilterHashtable @{
        LogName   = 'Microsoft-Windows-Windows Defender/Operational'
        StartTime = $sevenDaysAgo
    } -ErrorAction Stop
} catch {
    Write-Host "ERROR: Could not access Defender event log. Run as Administrator?" -ForegroundColor Red
    return
}

$restoredThreats = @()
foreach ($event in $events) {
    $xml = [xml]$event.ToXml()
    $eventID = $xml.Event.System.EventID

    if ($eventID -eq 1009 -or $xml.InnerXml -like "*restored*") {
        $threatName = $xml.Event.EventData.Data | Where-Object { $_.Name -match 'ThreatName|Name' } | Select-Object -ExpandProperty '#text' -ErrorAction SilentlyContinue
        if ($threatName) {
            $restoredThreats += $threatName
        } else {
            $restoredThreats += $event.Message
        }
    }
}

if ($restoredThreats.Count -eq 0) {
    Write-Host "SUCCESS: No restored threats in the past 7 days." -ForegroundColor Green
} else {
    Write-Host "WARNING: Restored threats found in the past 7 days:" -ForegroundColor Yellow
    $restoredThreats | Sort-Object -Unique | ForEach-Object {
        Write-Host " - $_" -ForegroundColor Yellow
    }
}

Write-Host "Press Enter to Continue..." -ForegroundColor Cyan
[void][System.Console]::ReadLine()
Clear-Host

# --- Check if running as Administrator ---
if (-not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Warning "This script must be run as Administrator. Exiting..."
    exit
}

# --- Prefetch Recent Executions (last 24 hours) ---
$prefetchPath = "$env:SystemRoot\Prefetch"
$cutoffTime = (Get-Date).AddHours(-24)
$prefetchFiles = Get-ChildItem -Path $prefetchPath -Filter *.pf -ErrorAction SilentlyContinue
$recentExecutions = @()

foreach ($file in $prefetchFiles) {
    $lastRunTime = $file.LastAccessTime
    if ($lastRunTime -ge $cutoffTime) {
        $exeName = $file.BaseName -replace "-.*", ".exe"
        $hoursAgo = [math]::Round(((Get-Date) - $lastRunTime).TotalHours, 2)

        $recentExecutions += [PSCustomObject]@{
            ExeName     = $exeName
            LastRunTime = $lastRunTime
            HoursAgo    = $hoursAgo
        }
    }
}

$recentExecutions = $recentExecutions | Sort-Object LastRunTime
Clear-Host

if ($recentExecutions.Count -eq 0) {
    Write-Host "No recent prefetch executions in the last 24 hours." -ForegroundColor Green
} else {
    Write-Host "--- Recent Prefetch Executions (last 24 hours) ---" -ForegroundColor White
    foreach ($entry in $recentExecutions) {
        Write-Output "$($entry.ExeName) | Last Run: $($entry.LastRunTime) | $($entry.HoursAgo) hours ago"
    }
}

Write-Host "Press Enter to Continue..." -ForegroundColor Cyan
[void][System.Console]::ReadLine()
Clear-Host

# --- BAM Check ---
Write-Host "=== BAM Check ===" -ForegroundColor Cyan
Write-Host "NOTE: Scroll all the way down when opened." -ForegroundColor Yellow
iex (iwr "https://raw.githubusercontent.com/2Krxzy/BAM/refs/heads/main/BAM")

Write-Host "Press Enter to Continue..." -ForegroundColor Cyan
[void][System.Console]::ReadLine()
Clear-Host

# --- USB Deview ---
Write-Host "=== USB Deview ===" -ForegroundColor Cyan
Write-Host "NOTE: Scroll all the way down when opened." -ForegroundColor Yellow

$usbUrl = "https://www.nirsoft.net/utils/usbdeview.zip"
$zipPath = "$env:TEMP\usbdeview.zip"
$extractPath = "$env:TEMP\usbdeview"

Write-Host "Downloading USBDeview..." -ForegroundColor Green
Invoke-WebRequest -Uri $usbUrl -OutFile $zipPath

Write-Host "Extracting USBDeview..." -ForegroundColor Green
Expand-Archive -Path $zipPath -DestinationPath $extractPath -Force

$usbExe = Get-ChildItem -Path $extractPath -Filter "USBDeview.exe" -Recurse | Select-Object -First 1

if ($usbExe) {
    Write-Host "Launching USBDeview..." -ForegroundColor Green
    Start-Process $usbExe.FullName
} else {
    Write-Host "ERROR: USBDeview.exe not found!" -ForegroundColor Red
}

Write-Host "Press Enter to Continue..." -ForegroundColor Cyan
[void][System.Console]::ReadLine()
Clear-Host

# --- Registry Check ---
Write-Host "=== Registry Check ===" -ForegroundColor Cyan

Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Applets\Regedit" -Name "LastKey" -Value "Computer\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows Defender\Exclusions"
Start-Process regedit.exe
Write-Host "NOTE: Full screen and **Scroll all the way down**!" -ForegroundColor Yellow
Write-Host "Press Enter to Continue..." -ForegroundColor Cyan
[void][System.Console]::ReadLine()

Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Applets\Regedit" -Name "LastKey" -Value "Computer\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows Defender\Exclusions\Processes"
Start-Process regedit.exe
Write-Host "NOTE: Full screen and **Scroll all the way down**!" -ForegroundColor Yellow
Write-Host "Press Enter to Continue..." -ForegroundColor Cyan
[void][System.Console]::ReadLine()

Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Applets\Regedit" -Name "LastKey" -Value "Computer\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows Defender\Exclusions\TemporaryPaths"
Start-Process regedit.exe
Write-Host "NOTE: Full screen and **Scroll all the way down**!" -ForegroundColor Yellow
Write-Host "Press Enter to Continue..." -ForegroundColor Cyan
[void][System.Console]::ReadLine()

Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Applets\Regedit" -Name "LastKey" -Value "Computer\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows Defender\Exclusions\Paths"
Start-Process regedit.exe
Write-Host "NOTE: Full screen and **Scroll all the way down**!" -ForegroundColor Yellow
Write-Host "Press Enter to Continue..." -ForegroundColor Cyan
[void][System.Console]::ReadLine()

Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Applets\Regedit" -Name "LastKey" -Value "Computer\HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FeatureUsage\AppSwitched"
Start-Process regedit.exe
Write-Host "NOTE: Full screen and **Scroll all the way down**!" -ForegroundColor Yellow
Write-Host "Press Enter to Continue..." -ForegroundColor Cyan
[void][System.Console]::ReadLine()

Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Applets\Regedit" -Name "LastKey" -Value "Computer\HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FeatureUsage\ShowJumpView"
Start-Process regedit.exe
Write-Host "NOTE: Full screen and **Scroll all the way down**!" -ForegroundColor Yellow
Write-Host "Press Enter to Continue..." -ForegroundColor Cyan
[void][System.Console]::ReadLine()
Clear-Host

# --- Process Explorer ---
Write-Host "=== Process Explorer ===" -ForegroundColor Cyan

$procexpUrl = "https://live.sysinternals.com/procexp.exe"
$procexpPath = "$env:TEMP\procexp.exe"

Write-Host "Downloading Process Explorer..." -ForegroundColor Green
Invoke-WebRequest -Uri $procexpUrl -OutFile $procexpPath

Write-Host "Launching Process Explorer..." -ForegroundColor Green
Start-Process $procexpPath

Write-Host "NOTE: Full screen and **Scroll all the way down**!" -ForegroundColor Yellow

Write-Host "Press Enter to Continue..." -ForegroundColor Cyan
[void][System.Console]::ReadLine()
Clear-Host

# --- Win OBJ ---
Write-Host "=== WIN OBJ ===" -ForegroundColor Cyan

$winobjUrl = "https://live.sysinternals.com/Winobj.exe"
$winobjPath = "$env:TEMP\Winobj.exe"

Write-Host "Downloading WinObj..." -ForegroundColor Green
Invoke-WebRequest -Uri $winobjUrl -OutFile $winobjPath

Write-Host "Launching WinObj..." -ForegroundColor Green
Start-Process $winobjPath

Write-Host "NOTE: Go to **Sessions -> 0**, expand **Dos Devices.** Then click on **EVERY folder** you see in **Dos Devices**." -ForegroundColor Yellow

Write-Host "Press Enter to Continue..." -ForegroundColor Cyan
[void][System.Console]::ReadLine()
Clear-Host

# --- Resource Monitor ---
Write-Host "=== RESOURCE MONITOR ===" -ForegroundColor Cyan

Write-Host "Launching Resource Monitor..." -ForegroundColor Green
Start-Process resmon.exe

Write-Host "NOTE: **Full screen**, navigate to **Overview** and **Scroll Down**, then navigate to **CPU** and **scroll all the way down**." -ForegroundColor Yellow

Write-Host "Press Enter to Continue..." -ForegroundColor Cyan
[void][System.Console]::ReadLine()
Clear-Host

# --- Deleting External Packages ---
Write-Host "=== Deleting External Packages ===" -ForegroundColor Cyan

# Define search patterns
$patterns = @(
    "Microsoft Visual C++",
    "DirectX"
)

# Paths to check (32-bit and 64-bit uninstall keys)
$uninstallPaths = @(
    "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*",
    "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*"
)

foreach ($path in $uninstallPaths) {
    Get-ItemProperty $path |
    Where-Object {
        $name = $_.DisplayName
        $name -and ($patterns | ForEach-Object { $name -like "*$_*" }) -contains $true
    } |
    ForEach-Object {
        Write-Host "Uninstalling $($_.DisplayName)..." -ForegroundColor Yellow
        if ($_.PSChildName -match "^\{.*\}$") {
            # GUID-based uninstall
            Start-Process "msiexec.exe" -ArgumentList "/x $($_.PSChildName) /quiet /norestart" -Wait
        }
        elseif ($_.UninstallString) {
            # Direct uninstall string
            $cmd = $_.UninstallString
            # Ensure silent uninstall if possible
            if ($cmd -notmatch "/quiet" -and $cmd -notmatch "/qn") {
                $cmd += " /quiet /norestart"
            }
            Start-Process "cmd.exe" -ArgumentList "/c $cmd" -Wait
        }
    }
}
[void][System.Console]::ReadLine()
Clear-Host

